#!/usr/bin/env node

const ytpl = require("ytpl");
const { parseArgs } = require("node:util");
const fs = require("fs");
const ytdl = require("ytdl-core");
const { pipeline } = require("node:stream/promises");

const acceptableName = (name) =>
  name
    .replace(/[^a-z0-9]/gi, "_")
    .replace(/_{2,}/g, "_")
    .replace(/^_|_$/g, "");

const args = parseArgs({
  allowPositionals: true,
  options: {
    help: {
      type: "boolean",
      short: "h",
      default: false,      
    },
  },
});

if(args?.options?.help || !args.positionals.length) {
  console.log(`Usage: ytdlpl <playlist> [playlist] [playlist] ...`);
  process.exit(0);
}

Promise.allSettled(
  args.positionals.map((playlist) => {
    return ytpl(playlist, { limit: 100 }).then(async (playlist) => {
      console.log(playlist);
      console.log(`___________________________________________________`);
      const folder = acceptableName(playlist.title);
      fs.mkdirSync(folder, { recursive: true });
      await playlist.items.reduce((queue, item) => {
        return queue.then(() => {
          console.log(`[start] ${item.title}`);
          let dlStream;
          try {
            dlStream = ytdl(item.url, {
              filter: (fmt) => fmt.container === "mp4" && !fmt.hasVideo,
            });
          } catch (e) {
            dlStream = ytdl(item.url, { filter: "audioonly" });
          }
          return new Promise((resolve, reject) => {
            dlStream.on("info", (info, format) => {
              const filename = `./${folder}/${acceptableName(item.title)}.${format.container}`;
              pipeline(
                dlStream,
                fs.createWriteStream(
                  filename
                )
              ).then(
                () => resolve(filename),
                reject
              );
            });
          }).then((name) => console.log(`[done ] ${name}`));
        });
      }, Promise.resolve());
    });
  })
);
